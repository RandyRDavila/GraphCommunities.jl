var documenterSearchIndex = {"docs":
[{"location":"#GraphCommunities.jl-Documentation","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"","category":"section"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"Welcome to the GraphCommunities.jl documentation! This package offers tools and utilities for analyzing graph communities, providing both efficient algorithms and comprehensive visualizations.","category":"page"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"","category":"page"},{"location":"#Introduction","page":"GraphCommunities.jl Documentation","title":"Introduction","text":"","category":"section"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"GraphCommunities.jl was developed to simplify the process of community detection and analysis in graphs. By integrating with Julia's rich ecosystem of libraries, GraphCommunities.jl stands as a robust tool for researchers, data analysts, and anyone interested in graph theory.","category":"page"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"","category":"page"},{"location":"#Getting-Started","page":"GraphCommunities.jl Documentation","title":"Getting Started","text":"","category":"section"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"To install GraphCommunities.jl, run the following command:","category":"page"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"using Pkg\nPkg.add(\"GraphCommunities\")","category":"page"},{"location":"","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.jl Documentation","text":"community_detection\ngenerate\ndraw_communities","category":"page"},{"location":"#GraphCommunities.community_detection","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.community_detection","text":"community_detection(g::AbstractGraph, algo::Louvain) -> Dict{Int, Int}\n\nDetect communities in a graph g using the Louvain algorithm, a method based on modularity optimization.\n\nThe algorithm consists of two phases that are repeated iteratively:\n\nLocal Phase: Each node is moved to the community that yields the highest modularity gain.\nAggregation Phase: A new graph is constructed where nodes represent communities from the previous phase.\n\nThese phases are repeated until the modularity ceases to increase significantly.\n\nArguments\n\ng::AbstractGraph: The graph on which to detect communities.\nalgo::Louvain: Indicates that the Louvain algorithm should be used for community detection.\n\nReturns\n\nA dictionary mapping node IDs in the original graph to their respective community IDs.\n\nExample\n\njulia> using GraphCommunities\njulia> g = karate_club_graph()\njulia> community_detection(g, Louvain())\n\nNotes\n\nThe algorithm may not return the same community structure on different runs due to its heuristic nature. However, the structures should be reasonably similar and of comparable quality.\n\n\n\n\n\ncommunity_detection(g::AbstractGraph, algo::KClique) -> Dict{Int, Int}\n\nDetect communities in a graph g using the K-Clique algorithm.\n\nThe function first finds triangles (or 3-cliques) in the graph. It then constructs a k-clique graph where nodes represent triangles, and edges indicate overlap. The connected components of this k-clique graph give the communities in the original graph.\n\nArguments\n\ng::AbstractGraph: The graph on which to detect communities.\nalgo::KClique: Indicates that the K-Clique algorithm should be used for community detection.\n\nReturns\n\nA dictionary mapping node IDs in the original graph to their respective community IDs.\n\nExample\n\njulia> using GraphCommunities\njulia> g = karate_club_graph()\njulia> community_detection(g, KClique())\n\nNotes\n\nCurrently, the implementation is restricted to 3-cliques (triangles). Future versions might support other clique sizes.\n\n\n\n\n\ncommunity_detection(g::AbstractGraph, algo::LabelPropagation) -> Dict{Int, Int}\n\nDetect communities in a graph g using the Label Propagation algorithm.\n\nThe algorithm works by assigning each node a unique label. Then, in each iteration, each node adopts the label that is most frequent among its neighbors. The algorithm terminates when no node changes its label.\n\nArguments\n\ng::AbstractGraph: The graph on which to detect communities.\nalgo::LabelPropagation: Indicates that the Label Propagation algorithm should be used for community detection.\n\nReturns\n\nA dictionary mapping node IDs in the original graph to their respective community IDs.\n\nExample\n\njulia> using GraphCommunities\njulia> g = karate_club_graph()\njulia> community_detection(g, LabelPropagation())\n\nNotes\n\nThe algorithm may not return the same community structure on different runs due to its heuristic nature. However, the structures should be reasonably similar and of comparable quality.\n\n\n\n\n\n","category":"function"},{"location":"#GraphCommunities.generate","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.generate","text":"generate(structure::ChainedCliques)::SimpleGraph\n\nCreate a graph consisting of structure.r cliques, each of size structure.k, chained together.\n\nstructure.r represents the number of cliques.\nstructure.k represents the size of each clique.\n\nReturns a SimpleGraph with the chained cliques.\n\n\n\n\n\ngenerate(structure::PlantedPartition)::SimpleGraph\n\nGenerate a graph based on the planted partition model.\n\nstructure.n_communities is the number of communities.\nstructure.nodes_per_community denotes the number of nodes per community.\nstructure.pintra is the probability of an edge within a community.\nstructure.pinter is the probability of an edge between communities.\n\nReturns a SimpleGraph constructed based on the planted partition model.\n\n\n\n\n\ngenerate(structure::KarateClub)::SimpleGraph\n\nConstruct the famous Zachary's Karate Club graph. This graph represents the friendships between the 34 members of a karate club studied by Wayne W. Zachary in 1977.\n\nReturns a SimpleGraph representing the Karate Club network.\n\n\n\n\n\n","category":"function"},{"location":"#GraphCommunities.draw_communities","page":"GraphCommunities.jl Documentation","title":"GraphCommunities.draw_communities","text":"draw_communities(g::AbstractGraph, communities::Dict)\n\nDraw the graph g with nodes colored based on their community assignments.\n\nArguments\n\ng::AbstractGraph: The input graph.\ncommunities::Dict: A dictionary mapping each vertex to its community.\n\nReturns\n\nA plot with nodes colored based on their community.\n\nNote\n\nThis function will only work if each node in the graph is assigned to a community.\n\n\n\n\n\n","category":"function"}]
}
